GREEN='\[\033[1;32m\]'
RED='\[\033[0;31m\]'
NC='\[\033[0m\]'
export PS1="${GREEN}\W ${RED}‚ùØ${NC} "


export CLICOLOR=1
export FIGNORE=CVS:\~:.svn
export EDITOR=vim
export SVN_EDITOR=vim
export HISTFILESIZE=6000
export HISTSIZE=5000
export HISTTIMEFORMAT="%d/%m/%y %T "
export HISTCONTROL=erasedups
export RIPGREP_CONFIG_PATH=~/.ripgreprc
shopt -s dotglob nullglob  # * match .git so moving files doesn't drop hidden ones

# GO setup
export GOPATH=~/go
export PATH=${PATH}:${GOPATH}/bin:/usr/local/go/bin

# Conda build path
export CONDA_BLD_PATH=/tmp/

# Add dotfiles binaries
export PATH=${PATH}:${HOME}/dotfiles/bin

# Stop node trying to write to root owned dirs
# https://stackoverflow.com/questions/16724259/npm-command-sudo-or-not#18296178
export N_PREFIX=$HOME/.node # For `n` command (version managment)
export PATH=$N_PREFIX/.node_modules/bin:$PATH

#alias h="head -n 5"
alias ll="ls -ltrh "
alias llt="ls -ltrh --color=always | tail"
alias lsh="ls -a | grep '^\.'"
alias llh="ls -lhta | grep ' \.'"
alias grep="grep --color=auto -E "
#alias ssh="ssh -o StrictHostKeyChecking=no "
alias pytags="ctags -R --fields=+l --languages=python --python-kinds=-iv -f .tags ./"
alias speedtest="wget --report-speed=bits -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip"
alias speedtestlocal="wget --report-speed=bits -O /dev/null http://192.168.0.1/shares/Drop/test10.zip"
alias tree="tree -C -L 3 " # Limit depth to 3
alias fullcurl="curl -sSL -D - " # Sick of not seeing any info
alias prettyping="prettyping --nolegend "
alias top="top -s1 -o cpu -R -F"
alias torrent-search="we-get " # Use with `webtorrent` for downloading
alias webtorrent="webtorrent --not-on-top --keep-seeding "
alias recent="find  -maxdepth 1 -mtime -1 "
alias rgall='rg --hidden --no-ignore '
#alias golint='golangci-lint run --enable golint,stylecheck '

# Python package
list-py-reqs(){
    grep --include \*.py -r 'import' * -h | awk -F '[.[:space:]]' '{print $2}' | sort -u
}

# fast file filtering
lsg(){
        ls -a | grep -i "$1"
}
llg(){
        ll -ah | grep -i "$1"
}

# Progress copy
pcp(){
    if [ "$#" != 2 ]
    then
      echo "Usage:  \n\t$ pcp {SRC_DIR} {DEST_DIR}"
    else
        rsync -avEP "${1}" "${2}"
    fi
}

weather(){
    if [ "$#" -lt 1 ]
    then
      echo "Usage:  weather sydney"
    else
        for location in $@;
            do
                echo "Getting weather in: ${location}"
                curl wttr.in/${location}
            done
    fi
}

timestampe_to_iso(){
    if [ "$#" -lt 1 ]
    then
      echo "Usage:  timestamp_to_iso 1575551200"
    else
      #echo ${1}
      python -c "from datetime import datetime, timezone; print(datetime.fromtimestamp(${1}, tz=timezone.utc).isoformat(sep=' ', timespec='minutes'))"
    fi
}

refactor_recursive(){
    # Usage: refactor_recursive <word to replace> <new word>
    # Will recurse into any subdirectories
    # recomend doing a git commit first to allow easy reversion if it breaks
    if [ "$#" != 2 ]
    then
      echo "Usage:  refactor_recursive <old_word> <new_word>"
      echo "When matching on parenthesis '()' enclose in []"
    else
        grep -Ir "$1" * | cut -d: -f1 | uniq | xargs -I {} sed -i 's/'"$1"'/'"$2"'/g' {}
    fi
}

pyclean(){
    find . -name '*egg-info' | xargs rm -rf
    find . -name '__pycache__' | xargs rm -rf
    find . -name 'build' | xargs rm -rf
    find . -name 'dist' | xargs rm -rf
    find . -name '*.pyc' | xargs rm -f
    find . -name '*.pytest_cache' | xargs rm -rf
}

what() {
    if [ ${#@} -lt 2  ]; then
		echo "what vim ipython instead of vim `which ipython`"
        echo Usage:
        echo "  what <command [args..]> <arg_to_resolve_with_which>"
    else
        ${@:1:$((${#@} - 1))} $(which ${@:${#@}})
    fi
}

# My FZF custom settings (.fzf.bash is installed by setup.sh, fzf itself is installed by setup_vim.sh)
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:wrap --bind '?:toggle-preview'"  # --preview-window down:3:hidden:wrap
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border -m --tiebreak=length'  # --algo=v1'  --exact  #
export FZF_ALT_C_OPTS="--preview 'tree -C {} ' "
export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers,changes --color always {}' "
export FZF_COMPLETION_OPTS="--preview 'bat --style=numbers,changes --color always {}' "

if [ -f ~/.bashrc_local ]; then
    source ~/.bashrc_local
fi

# Get AWS Credentials
# Automatically load into existing session without copy/paste
gac(){
	rm -f /tmp/awscreds
	for i in "$( get-aws-creds "$@" --quiet)"
	do
		eval "${i}"
		echo "${i}" >> /tmp/awscreds
	done
}

# Reduce need to Get session creds multiple times for each shell
# If opening a new shell inside tmux you'll get the env vars that
# it started with ... which may be old.  Maybe sure they're gone
unset AWS_ACCESS_KEY_ID AWS_SESSION_TOKEN AWS_SECRET_ACCESS_KEY
if [ -f /tmp/awscreds ]; then
    source /tmp/awscreds
fi
